<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | 50a23bb7]]></title>
  <link href="http://zellux.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://zellux.github.com/"/>
  <updated>2012-09-01T21:56:50+08:00</updated>
  <id>http://zellux.github.com/</id>
  <author>
    <name><![CDATA[zellux]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Order of Formats in response_to Does Matter]]></title>
    <link href="http://zellux.github.com/blog/2012/08/order-of-different-formats-in-response-to-does-matter/"/>
    <updated>2012-08-17T19:48:00+08:00</updated>
    <id>http://zellux.github.com/blog/2012/08/order-of-different-formats-in-response-to-does-matter</id>
    <content type="html"><![CDATA[<p>The following code snippet works well for most browsers:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">blah</span> <span class="n">blah</span> <span class="p">}</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>But some browsers, especially embedded webkit components, may set ContentType to <code>*/*</code> in request headers. In this case, they will get JSON data instead of HTML if they do not explicitly specify .html format in URL.</p>

<p>So as long as it is not intended, putting format.html before format.json will always be a better choice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Content-Length to send_file Headers]]></title>
    <link href="http://zellux.github.com/blog/2012/06/adding-missing-content-length-to-send-file-headers/"/>
    <updated>2012-06-18T19:52:00+08:00</updated>
    <id>http://zellux.github.com/blog/2012/06/adding-missing-content-length-to-send-file-headers</id>
    <content type="html"><![CDATA[<p>Some clients and networking libraries may expect 'Content-Length' in response headers when downloading files. However, this parameter is not provided in Rails send_file method. To add content size to the header, you may just add a line next to the send_file method:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">download</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;filename = params[:name]</span>
</span><span class='line'><span class="sr">send_file(filename)</span>
</span><span class='line'><span class="sr">headers[&#39;Content-Length&#39;] = File.size(filename)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Notes on RSpec]]></title>
    <link href="http://zellux.github.com/blog/2012/05/some-notes-on-rspec/"/>
    <updated>2012-05-07T15:40:00+08:00</updated>
    <id>http://zellux.github.com/blog/2012/05/some-notes-on-rspec</id>
    <content type="html"><![CDATA[<h3>Stubbing instance methods</h3>

<p>The method <code>any_instance</code> allows stubbing instance methods easily. For example, the following line will force calling Item#price to return 10 always:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Item</span><span class="o">.</span><span class="n">any_instance</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:price</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Stubbing in helper specs</h3>

<p>Stubbing in helper specs is similar to stubbing in controller specs. Just remember to add <code>helper.</code> before every helper method call.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s1">&#39;test current user&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">helper</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:current_user</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>  <span class="n">helper</span><span class="o">.</span><span class="n">user_avatar</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_empty</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>let and let!</h3>

<p>Variables defined by <code>let</code> is evaluated in a lazy way. Use <code>let!</code> to force the evaluation before each spec.</p>
]]></content>
  </entry>
  
</feed>
